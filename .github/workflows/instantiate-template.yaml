name: "âž• Instantiate: New repository"

# NOTE: This workflow only works for the owner of this repository due to its use
# of a personal access token. Fork this repository to gain access to its capability.

on:
  workflow_call:
    inputs:
      name:
        type: string
        description: "The name of the new repository."
        required: true
      description:
        type: string
        description: "A description for the new repository."
        required: false
      private:
        type: boolean
        description: "Whether to make the new repository private."
        required: false
        default: true
      ref:
        type: string
        description: "The 'godot-project-template' ref name to copy into the new repository's 'main'."
        required: true
        default: main

      token:
        type: string
        description: "The personal access token (PAT) used to create the new repository."
        required: true

  workflow_dispatch:
    inputs:
      name:
        type: string
        description: "The name of the new repository."
        required: true
      description:
        type: string
        description: "A description for the new repository."
        required: false
      private:
        type: boolean
        description: "Whether to make the new repository private."
        required: false
        default: true
      ref:
        type: string
        description: "The 'godot-project-template' ref name to copy into the new repository's 'main'."
        required: true
        default: main

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  description: "${{ inputs.description || 'A new Godot 4+ project.' }}"
  token: "${{ github.event_name == 'workflow_call' && inputs.token || secrets.REPO_CREATE_TOKEN }}"

jobs:
  instantiate-template:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Create the new repository
        env:
          GH_TOKEN: "${{ env.token }}" # Required in order to use the 'gh' CLI.
        run: |-
          # Check if the repository exists
          if gh repo view coffeebeats/${{ inputs.name }} >/dev/null 2>&1; then
            echo "Repository already exists; exiting without making changes."
            exit 1
          fi

          # Create the new repository
          gh repo create ${{ inputs.name }} \
            --template coffeebeats/godot-project-template \
            --description "${{ env.description }}" \
            $([[ "${{ inputs.private }}" == "true" ]] && echo "--private" || echo "--public") \
            $([[ "${{ inputs.ref }}" != "main" ]] && echo "--include-all-branches" || :) \
            --disable-wiki

          # Update repository settings
          gh repo edit coffeebeats/${{ inputs.name }} \
            --allow-update-branch \
            --delete-branch-on-merge \
            --enable-auto-merge \
            --enable-squash-merge \
            --enable-merge-commit=false \
            --enable-rebase-merge=false \
            --enable-projects=false

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: "main"
          repository: coffeebeats/${{ inputs.name }}
          token: ${{ env.token }}

      - name: "Configure Git user"
        run: |
          # See https://github.com/orgs/community/discussions/26560#discussioncomment-3531273
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Copy target ref to 'main'
        if: inputs.ref != 'main'
        run: |
          # Reset 'main' to the target ref
          git reset --hard ${{ inputs.ref }}

          # Push changes to remote repository
          echo "Updating remote branch 'main' to ref: ${{ inputs.ref }}"
          git push -f origin main

          # Delete other branches
          for branch in $(git for-each-ref --format='%(refname:strip=2)' "refs/heads/$1"); do
            if [[ "$branch" == "main" ]]; then
              continue
            fi

            echo "Deleting branch on remote repository: $branch"
            git push origin --delete "$branch"
          done

      - name: Update CHANGELOG and README
        run: |
          # Update CHANGELOG
          echo "# Changelog" > CHANGELOG.md

          # Update README
          cat <<EOM > README.md
          # ${{ inputs.name }}

          ${{ env.description }}
          EOM

          git add CHANGELOG.md README.md
          git commit --amend --no-edit

      - name: Initialize project versioning
        run: |
          # Update 'release-please' manifest
          cat <<EOM > .release-please/manifest.json
          {
            ".": "0.1.0"
          }
          EOM

          # Commit changes
          git add .release-please/manifest.json
          git commit --amend --no-edit

          # Push changes to remote repository
          echo "Updating remote branch 'main' to ref: ${{ inputs.ref }}"
          git push -f origin main

          # Tag the initial commit
          echo "Tagging initial commit: v0.1.0"
          git tag v0.1.0
          git push origin tag v0.1.0

      - name: Update GitHub Actions permissions
        env:
          GH_TOKEN: "${{ env.token }}" # Required in order to use the 'gh' CLI.
        run: |
          cat << EOM | gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" --input - /repos/coffeebeats/raid-sim-clicker/actions/permissions 
          {
            "enabled": true,
            "allowed_actions": "all"
          }
          EOM

          cat << EOM | gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" --input - /repos/coffeebeats/raid-sim-clicker/actions/permissions/workflow
          {
            "default_workflow_permissions":"write",
            "can_approve_pull_request_reviews":true
          }
          EOM

      - name: Create repository ruleset
        env:
          GH_TOKEN: "${{ env.token }}" # Required in order to use the 'gh' CLI.
        run: |
          cat << EOM | gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" --input - /repos/coffeebeats/${{ inputs.name }}/rulesets 
          {
            "name": "main",
            "enforcement": "active",
            "target": "branch",
            "bypass_actors": [
              {
                "actor_id": 2,
                "actor_type": "RepositoryRole"
              },
              {
                "actor_id": 4,
                "actor_type": "RepositoryRole"
              }
            ],
            "conditions": {
              "ref_name": {
                "exclude": [],
                "include": ["~DEFAULT_BRANCH"]
              }
            },
            "rules": [
              {
                "type": "creation"
              },
              {
                "type": "deletion"
              },
              {
                "type": "required_linear_history"
              },
              {
                "type": "non_fast_forward"
              },
              {
                "type": "pull_request",
                "parameters": {
                  "allowed_merge_methods": ["squash"],
                  "dismiss_stale_reviews_on_push": true,
                  "require_code_owner_review": true,
                  "require_last_push_approval": false,
                  "required_approving_review_count": 0,
                  "required_review_thread_resolution": true
                }
              },
              {
                "type": "required_status_checks",
                "parameters": {
                  "do_not_enforce_on_create": true,
                  "strict_required_status_checks_policy": true,
                  "required_status_checks": [
                    {
                      "context": "branch_protection",
                      "integration_id": 15368
                    }  
                  ]
                }
              }
            ]
          }
          EOM

name: "ðŸ¤– Export: Godot project"

on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: true
      arch:
        type: string
        required: true
      storefront:
        type: string
        required: true
      profile:
        type: string
        required: true
      publish-export-template:
        type: boolean
        required: false
        default: false
    outputs:
      name:
        description: "The name of the artifact containing the exported game."
        value: ${{ jobs.package.outputs.artifact-name }}
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: "The platform to target."
        required: true
        default: windows
        options:
          - macos
          - windows
      arch:
        type: choice
        description: "The CPU architecture to target."
        required: true
        default: x86_64
        options:
          - x86_64
          - universal
      storefront:
        type: choice
        description: "The distribution storefront to target."
        required: true
        default: unknown
        options:
          - unknown
          - steam
      profile:
        type: choice
        description: "The optimization profile of the compiled export template."
        required: false
        default: release
        options:
          - release
          - release_debug
          - debug
      publish-export-template:
        type: boolean
        description: "Whether to publish the export template as an artifact."
        required: false
        default: false

jobs:
  config:
    runs-on: ubuntu-latest
    timeout-minutes: 2

    outputs:
      presets: ${{ steps.set-presets.outputs.value }}
      godot-version: "${{ steps.version.outputs.semantic }}"

    steps:
      - uses: actions/checkout@v4

      - uses: "coffeebeats/godot-infra/.github/actions/parse-godot-version@main" # TODO: Pin to 'v0'.
        id: version
        with:
          gdenv-pin-path: .godot-version

      - name: Evaluate presets
        id: set-presets
        shell: bash
        run: |-
          PRESETS=($(grep '^name=' export_presets.cfg | sed 's/name=//' | sed 's/"//g' | grep ${{ inputs.storefront }} | grep ${{ inputs.arch }}))
          echo value=$(jq -c -n '$ARGS.positional' --args "${PRESETS[@]}") >> $GITHUB_OUTPUT

  compile:
    needs: ["config"]

    runs-on: ubuntu-latest
    timeout-minutes: 75

    outputs:
      key: ${{ steps.cache.outputs.key }}
      path: ${{ steps.cache.outputs.path }}

    steps:
      - uses: actions/checkout@v4

      - uses: "coffeebeats/godot-infra/compile-godot-export-template@main" # TODO: Pin to 'v0'.
        id: compile
        with:
          publish: ${{ inputs.publish-export-template }}

          godot-src-rev: ${{ needs.config.outputs.godot-version }}

          platform: ${{ inputs.platform }}
          arch: ${{ inputs.arch }}

          custompy-path: ./custom.py
          icon-path: ./icon.svg
          profile: ${{ inputs.profile }}
          use-double-precision: false

          # FIXME: Set secrets for the project.
          encryption-key: ""

      # -------------------- Save export template artifact ------------------- #

      # NOTE: Rather than pass the export template between jobs as an artifact,
      # use the 'actions/cache' action, which is faster for small files.

      - name: Identify the export template file name
        id: export-template
        shell: bash
        run: |-
          TEMPLATE_NAME="$(basename ${{ steps.compile.outputs.path }})"

          echo name="$TEMPLATE_NAME" >> $GITHUB_OUTPUT

      - name: Move the export template to the cache directory
        id: cache
        shell: bash
        run: |-
          TARGET="${{ runner.temp }}/build/${{ steps.export-template.outputs.name }}"

          echo "Moving compiled export template to inter-job cache."
          echo "Source file: ${{ steps.compile.outputs.path }}"
          echo "Destination file: $TARGET"

          mkdir -p ${{ runner.temp }}/build
          sudo mv ${{ steps.compile.outputs.path }} ${{ runner.temp }}/build

          ls ${{ runner.temp }}/build

          echo path="$TARGET" >> $GITHUB_OUTPUT
          echo key='compile-${{ github.run_id }}-${{ hashFiles(format('{0}/build/{1}', runner.temp, steps.export-template.outputs.name)) }}' >> $GITHUB_OUTPUT

      - name: Cache the export template to pass between jobs
        uses: actions/cache/save@v3
        with:
          key: ${{ steps.cache.outputs.key }}
          path: ${{ steps.cache.outputs.path }}

  export:
    needs: ["config", "compile"]

    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: true

      matrix:
        preset: ${{ fromJson(needs.config.outputs.presets) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/cache/restore@v3
        with:
          key: ${{ needs.compile.outputs.key }}
          path: ${{ needs.compile.outputs.path }}

      # ---------------------- Export required presets --------------------- #

      # Main executable
      - uses: "coffeebeats/godot-infra/export-godot-project-preset@main" # TODO: Pin to 'v0'.
        with:
          publish: true
          artifact-name: "export-${{ matrix.preset }}"

          preset-name: "${{ matrix.preset }}"

          godot-editor-version: ${{ needs.config.outputs.godot-version }}
          export-template-path: ${{ needs.compile.outputs.path }}

          profile: ${{ inputs.profile }}

          # FIXME: Set secrets for the project.
          encryption-key: ""

          # Windows
          codesign-identity-type: ""
          codesign-identity: ""
          codesign-password: ""

          # MacOS
          codesign-certificate-file: ""
          codesign-certificate-password: ""
          codesign-provisioning-profile: ""
          notarization-api-uuid: ""
          notarization-api-key: ""
          notarization-api-key-id: ""
          notarization-apple-id-name: ""
          notarization-apple-id-password: ""

  package:
    needs: ["export"]

    outputs:
      artifact-name: ${{ env.ARTIFACT_NAME }}

    env:
      ARTIFACT_NAME: "game-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.storefront }}-${{ inputs.profile }}"

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/presets
          # NOTE: This needs to match the 'export' job's artifact names because
          # there's no easy way to reference the names exactly. If we don't do
          # this then this step can accidentally download artifacts from other
          # jobs with different inputs.
          pattern: export-*-${{ inputs.arch }}-${{ inputs.platform }}-${{ inputs.storefront }}
          merge-multiple: true

      - name: Assemble the final game artifact
        id: artifact
        shell: bash
        run: |-
          # Set options to enable more extensive globbing.
          shopt -s extglob
          shopt -s globstar

          LABEL="${{ env.ARTIFACT_NAME }}"

          # NOTE: Create a permission-preserving archive for the game. This is
          # critical to ensuring MacOS-targeted application bundles work when
          # downloaded.

          cd ${{ runner.temp }}/presets

          ls -ls

          ARCHIVE_PATH="${{ runner.temp }}/${LABEL}.tar.gz"
          tar \
            --strip-components 1 \
            -czf $ARCHIVE_PATH \
            *

          echo "Packaged export game artifacts into archive: $ARCHIVE_PATH"
          ls -ls $ARCHIVE_PATH

          echo "label=$LABEL" >> $GITHUB_OUTPUT
          echo "path=$ARCHIVE_PATH" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.label }}
          path: ${{ steps.artifact.outputs.path }}
